name: Python CI/CD Exam

on:
  push:
    branches:
      - A01633010

env:
  ECR_URL: "public.ecr.aws/d0z3f1c0/501ecr"

jobs:
  lint:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Prepare Python
        uses: actions/setup-python@v3
        with:
          python-version: "3.10"

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install pylint
          if [ -f FDSC/requirements.txt ]; then pip install -r FDSC/requirements.txt; fi

      - name: Linting
        run: pylint FDSC/app.py

  unit_tests:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Prepare Python
        uses: actions/setup-python@v3
        with:
          python-version: "3.10"

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install pytest coverage
          if [ -f FDSC/requirements.txt ]; then pip install -r FDSC/requirements.txt; fi

      - name: Testing and Coverage Report
        run: |
          coverage run -m pytest FDSC/test.py
          coverage report
          coverage html -d test_reports/coverage/

  build_package:
    if: github.event_name != 'pull_request'
    needs: unit_tests
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Build distribution tar ball
        run: tar -czvf app.tar.gz FDSC/

  dockerize:
    if: github.event_name != 'pull_request'
    needs: build_package
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Docker
        uses: docker/setup-buildx-action@v2

      - name: Build Docker image
        run: docker build -t python-lambda .

  deploy_to_ecr:
    needs: dockerize
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: ECR Log In
        uses: aws-actions/amazon-ecr-login@v1
        with:
          registry: ${{ env.ECR_URL }}
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}

      - name: Docker Tagging
        run: |
          docker tag python-lambda:latest ${{ env.ECR_URL }}/python-lambda:A01633010
          docker tag python-lambda:latest ${{ env.ECR_URL }}/python-lambda:latest

      - name: Push Image
        run: docker push ${{ env.ECR_URL }}/python-lambda:latest
