name: Lambda Workflow A01024927

on:
  push:
    branches: ["*"]
  pull_request:
    branches: ["*"]

permissions:
  contents: read

jobs:

  linting:
    runs-on: ubuntu-latest
    
    steps:
      - uses: actions/checkout@v3
      
      - name: Set up Python 3.10
        uses: actions/setup-python@v3
        with:
          python-version: "3.10"
          
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install flake8 
          
      - name: Lint with flake8
        run: |
          # stop the build if there are Python syntax errors or undefined names
          flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
          # exit-zero treats all errors as warnings. The GitHub editor is 127 chars wide
          flake8 . --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics
          
  unitTesting:
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v3
    
    - name: Set up Python 3.10
      uses: actions/setup-python@v3
      with:
        python-version: "3.10"
        
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install pytest coverage 
        
    - name: Test with pytest
      run: |
        coverage run -m pytest AISR/src/test.py
        coverage report
        coverage html -d cc_report/
        
  package:
    runs-on: ubuntu-latest
    needs: [unitTesting, linting]
    
    steps:
      - uses: actions/checkout@v3
      
      - name: Install zip
        run: sudo apt-get update && sudo apt-get install -y zip
        
      - name: Zip src directory
        run: zip -r test_package.zip . -i AISR/
        
      - name: Check zip size
        run: du -sh test_package.zip
        
      - name: Upload zip
        uses: actions/upload-artifact@v3
        with:
          name: package_zip
          path: test_package.zip
          
  dockerize:
    runs-on: ubuntu-latest
    needs: package

    steps:
      - name: Checkout repo
        uses: actions/checkout@v3

      - name: Create Docker builder
        run: |
          docker buildx create --use

      - name: Build and tag image 1
        uses: docker/build-push-action@v4
        env:
          URI_REPOSITORY: public.ecr.aws/d0z3f1c0/501ecr
          IMAGE_TAG: A01024927
        with:
            context: ./AISR
            tags: ${{ env.URI_REPOSITORY }}:${{ env.IMAGE_TAG }}
            outputs: type=docker,dest=/tmp/${{ env.IMAGE_TAG }}.tar

      - name: Save image 1
        uses: actions/upload-artifact@v3
        env:
          IMAGE_TAG: A01024927
        with:
          name: ${{ env.IMAGE_TAG }}
          path: /tmp/${{ env.IMAGE_TAG }}.tar
          
      - name: Build and tag image 2
        uses: docker/build-push-action@v4
        env:
          URI_REPOSITORY: public.ecr.aws/d0z3f1c0/501ecr
          IMAGE_TAG: latest
        with:
            context: ./AISR
            tags: ${{ env.URI_REPOSITORY }}:${{ env.IMAGE_TAG }}
            outputs: type=docker,dest=/tmp/${{ env.IMAGE_TAG }}.tar

      - name: Save image 2
        uses: actions/upload-artifact@v3
        env:
          IMAGE_TAG: latest
        with:
          name: ${{ env.IMAGE_TAG }}
          path: /tmp/${{ env.IMAGE_TAG }}.tar
