# This workflow will put the lambda code in a Lambda image and upload it to an ECR repsitory

name: Sum Lambda Deployment

on:
  push:
    branches: ["main", "A01029746"]
  pull_request:
    branches: ["main", "A01029746"]
    

jobs:
    # This job applies linting to the lambda
    build:
        runs-on: ubuntu-latest
        steps:
            - uses: actions/checkout@v2
            - name: Use Node.js 18.x
              uses: actions/setup-node@v3
              with:
                  node-version: '18.x'
            - name: Install dependencies
              working-directory: ./SGV/lambda
              run: |
                    npm install
                    npm run lint

    test:
        runs-on: ubuntu-latest
        needs: build
        steps:
            - uses: actions/checkout@v2
            - name: Use Node.js 18.x
              uses: actions/setup-node@v3
              with:
                  node-version: '18.x'
            - name: Test Code
              working-directory: ./SGV/lambda
              run: |
                     npm install
                     npm run test

    package:
        runs-on: ubuntu-latest
        needs: [build, test]
        steps:
            - uses: actions/checkout@v2
            - name: Use Node.js 18.x
              uses: actions/setup-node@v3
              with:
                  node-version: '18.x'
            - name: Install dependencies and package
              working-directory: ./SGV/lambda
              run: npm install
            - name: Package Lambda
              run: zip -r lambda.zip ./SGV/lambda

    dockerize:
        runs-on: ubuntu-latest
        needs: package
        steps:
            - name: Checkout
              uses: actions/checkout@v2
            - name: Set up Docker Buildx
              uses: docker/setup-buildx-action@v1
            - name: Configure AWS Credentials
              uses: aws-actions/configure-aws-credentials@v1
              with:
                aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
                aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
                aws-region: us-east-1
            - name: Login to Amazon ECR
              id: login-ecr
              uses: aws-actions/amazon-ecr-login@v1
              with:
                registry-type: public
            - name: Build and tag image
              uses: docker/build-push-action@v4
              env:
                ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
                ECR_REPOSITORY: d0z3f1c0/501ec
                IMAGE_TAG: A01029746
              with:
                context: ./SGV/lambda
                tags: ${{ env.ECR_REGISTRY }}/${{ env.ECR_REPOSITORY }}:${{ env.IMAGE_TAG }}
                outputs: type=docker,dest=/tmp/${{ env.IMAGE_TAG }}.tar
            - name: Save image
              uses: actions/upload-artifact@v3
              env:
                IMAGE_TAG: A01029746
              with:
                name: ${{ env.IMAGE_TAG }}
                path: /tmp/${{ env.IMAGE_TAG }}.tar

    deploy:
      runs-on: ubuntu-latest
      needs: dockerize
      steps:
            - name: Set up Docker Buildx
              uses: docker/setup-buildx-action@v2
            - name: Read artifact
              uses: actions/download-artifact@v3
              env:
                IMAGE_TAG: A01029746
              with:
                name: ${{ env.IMAGE_TAG }}
                path: /tmp
            - name: Configure AWS credentials
              uses: aws-actions/configure-aws-credentials@v1
              with:
                aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
                aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
                aws-region: us-east-1
            - name: Login to Amazon ECR
              id: login-ecr
              uses: aws-actions/amazon-ecr-login@v1
              with:
                registry-type: public
            - name: Deploy image
              env:
                ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
                ECR_REPOSITORY: d0z3f1c0/501ec
                IMAGE_TAG: A01029746
              run: |
                docker load --input /tmp/$IMAGE_TAG.tar
                docker image ls -a
                docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG

                

#testing
#package
#dockerize
#deploy

    # build:
    #     runs-on: ubuntu-latest
    #     steps:
    #         - uses: actions/checkout@v2
    #         - name: Set up Python 3.8
    #           uses: actions/setup-python@v2
    #           with:
    #               python-version: 3.8
    #         - name: Install dependencies
    #           run: |
    #               python -m pip install --upgrade pip
    #               pip install flake8 pytest
    #               if [ -f requirements.txt ]; then pip install -r requirements.txt; fi
    #         - name: Lint with flake8
    #           run: |
    #               # stop the build if there are Python syntax errors or undefined names
    #               flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
    #               # exit-zero treats all errors as warnings. The GitHub editor is 127 chars wide
    #               flake8 . --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics
    #         - name: Test with pytest
    #           run: |
    #               pytest
    #         - name: Package Lambda
    #           run: |
    #               mkdir -p package
    #               pip install -r requirements.txt --target ./package
    #               cp lambda_function.py ./package
    #               cd package
    #               zip -r ../function.zip .
    #               cd ..
    #         - name: Build and push Docker image
    #           uses: docker/build-push-action@v2
    #           with:
    #               push: true
    #               tags: a01029746/sum-lambda:latest
    #               build-args: |
    #                   FUNCTION_DIR=package
    #                   HANDLER=lambda_function.lambda_handler
    #                   RUNTIME=python3.8
    #                   AWS_REGION=us-east-1
    #                   AWS_ACCOUNT_ID=123456789012
    #                   IMAGE_REPO_NAME=sum-lambda
    #                   IMAGE_TAG=latest
    #                   IMAGE_URI=$AWS_ACCOUNT_ID.dkr.ecr.$AWS_REGION.amazonaws.com/$IMAGE_REPO_NAME:$IMAGE_TAG
    #                   ECR_REGISTRY=$AWS_ACCOUNT_ID.dkr.ecr.$AWS_REGION.amazonaws.com
    #                   AWS_DEFAULT_REGION=$AWS_REGION
    #                   AWS_ACCESS_KEY_ID=$AWS_ACCESS_KEY_ID
    #                   AWS_SECRET_ACCESS_KEY=$AWS_SECRET_ACCESS_KEY
    #                   AWS_SESSION_TOKEN=$AWS_SESSION_TOKEN
    #                   AWS_ROLE_ARN=$AWS_ROLE_ARN
    #                   AWS_ROLE_SESSION_NAME=$AWS_ROLE_SESSION_NAME
    #                   AWS_REGION=$AWS_REGION
    #                   AWS_ACCOUNT_ID=$AWS_ACCOUNT_ID
    #                   IMAGE_REPO

